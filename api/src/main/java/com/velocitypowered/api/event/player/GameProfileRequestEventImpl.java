/*
 * Copyright (C) 2018 Velocity Contributors
 *
 * The Velocity API is licensed under the terms of the MIT License. For more details,
 * reference the LICENSE file in the api top-level directory.
 */

package com.velocitypowered.api.event.player;

import com.google.common.base.Preconditions;
import com.velocitypowered.api.proxy.connection.InboundConnection;
import com.velocitypowered.api.proxy.player.java.JavaPlayerIdentity;
import org.checkerframework.checker.nullness.qual.Nullable;

/**
 * This event is fired after the {@link PreLoginEventImpl} in order to set up the game profile for
 * the user. This can be used to configure a custom profile for a user, i.e. skin replacement.
 */
public final class GameProfileRequestEventImpl implements GameProfileRequestEvent {

  private final String username;
  private final InboundConnection connection;
  private final JavaPlayerIdentity originalProfile;
  private final boolean onlineMode;
  private @Nullable JavaPlayerIdentity javaPlayerIdentity;

  /**
   * Creates a new instance.
   * @param connection the connection connecting to the proxy
   * @param originalProfile the original {@link JavaPlayerIdentity} for the user
   * @param onlineMode whether or not the user connected in online or offline mode
   */
  public GameProfileRequestEventImpl(InboundConnection connection, JavaPlayerIdentity originalProfile,
      boolean onlineMode) {
    this.connection = Preconditions.checkNotNull(connection, "connection");
    this.originalProfile = Preconditions.checkNotNull(originalProfile, "originalProfile");
    this.username = originalProfile.name();
    this.onlineMode = onlineMode;
  }

  @Override
  public InboundConnection connection() {
    return connection;
  }

  @Override
  public String username() {
    return username;
  }

  @Override
  public JavaPlayerIdentity initialProfile() {
    return originalProfile;
  }

  @Override
  public boolean isOnlineMode() {
    return onlineMode;
  }

  /**
   * Returns the game profile that will be used to initialize the connection with. Should no profile
   * be currently specified, the one generated by the proxy (for offline mode) or retrieved from the
   * Mojang session servers (for online mode) will be returned instead.
   *
   * @return the user's {@link JavaPlayerIdentity}
   */
  @Override
  public JavaPlayerIdentity gameProfile() {
    return javaPlayerIdentity == null ? originalProfile : javaPlayerIdentity;
  }

  /**
   * Sets the game profile to use for this connection.
   *
   * @param javaPlayerIdentity the profile for this connection, {@code null} uses the original profile
   */
  @Override
  public void setGameProfile(@Nullable JavaPlayerIdentity javaPlayerIdentity) {
    this.javaPlayerIdentity = javaPlayerIdentity;
  }

  @Override
  public String toString() {
    return "GameProfileRequestEvent{"
        + "username=" + username
        + ", gameProfile=" + javaPlayerIdentity
        + "}";
  }


}
